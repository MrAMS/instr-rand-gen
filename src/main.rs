use std::io::Write;

use rand::Rng;

mod bitspattern;
use bitspattern::BitsPattern;

fn main() {
    let instrs_num = 10;
    let output_path = std::path::Path::new("test.bin");
    let patterns = vec![
        // MSB
        ["00000000000100000???????????????", "ADDW"],
        ["00000000000100010???????????????", "SUBW"], 
        ["00000000000100100???????????????", "SLT"], 
        ["00000000000100101???????????????", "SLTU"],
        ["00000000000101000???????????????", "NOR"],
        ["00000000000101001???????????????", "AND"],
        ["00000000000101010???????????????", "OR"],
        ["00000000000101011???????????????", "XOR"],
        ["00000000000101110???????????????", "SLLW"],
        ["00000000000101111???????????????", "SRLW"],
        ["00000000000110000???????????????", "SRAW"],
    ];

    assert!(BitsPattern::new("00000000000100000???????????????").fit(0x0010421c)); // ADDW

    let mut seeds = Vec::new();
    for p in  patterns {
        seeds.push(BitsPattern::new(p[0]));
    }

    let mut f = std::fs::File::create(&output_path).unwrap();
    let mut rng = rand::thread_rng();
    for _ in 1..instrs_num{
        let i = rng.gen_range(0..seeds.len());
        let instr = seeds[i].generate::<u32>();
        // println!("{:#b}", instr);
        f.write_all(&instr.to_le_bytes()).unwrap();
    }
}
